realm-name: sample
reverse-proxy-uri: https://localhost
sso-issuer: ${reverse-proxy-uri}/auth/realms/${realm-name}
user-service-client-secret: secret


server:
  port: 8081
  error:
    include-message: always
  ssl:
    enabled: true
    bundle: server

spring:
  application:
    name: users-api
  config:
    import:
    - optional:configtree:/workspace/config/
    - optional:configtree:/workspace/secret/
  security:
    oauth2:
      client:
        provider:
          sso:
            issuer-uri: ${sso-issuer}
        registration:
          user-service:
            provider: sso
            client-id: user-service
            client-secret: ${user-service-client-secret}
            scope: openid
            authorization-grant-type: client_credentials
  ssl:
    bundle:
      pem:
        server:
          keystore:
            certificate: classpath:tls.crt
            private-key: classpath:tls.key
        client:
          truststore:
            certificate: classpath:tls.crt

com:
  c4-soft:
    springaddons:
      oidc:
        ops:
        - iss: ${sso-issuer}
          authorities:
          - path: $.realm_access.roles
            prefix: 'realm.'
          - path: $.resource_access.ui.roles
            prefix: 'ui.'
          - path: $.resource_access.third-party.roles
            prefix: 'third-party.'
        resourceserver:
          permit-all:
          - /v3/api-docs/**
          - /actuator/health/readiness
          - /actuator/health/liveness
      rest:
        client:
          keycloak-admin:
            base-url: ${reverse-proxy-uri}/auth
            authorization:
              oauth2:
                oauth2-registration-id: user-service
            ssl-bundle: client

management:
  endpoint:
    health:
      probes:
        enabled: true
  endpoints:
    web:
      exposure:
        include: '*'
  health:
    livenessstate:
      enabled: true
    readinessstate:
      enabled: true

logging:
  level:
    org.springframework: DEBUG

